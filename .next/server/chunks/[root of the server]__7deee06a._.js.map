{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/confirmation-details/route.ts"],"sourcesContent":["// src/app/api/confirmation-details/route.ts\nimport { NextResponse } from 'next/server';\nimport Stripe from 'stripe';\nimport { format, parseISO } from 'date-fns'; // Removed unused addDays\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  // apiVersion: '2025-03-31.basil', // Removed invalid API version\n});\n\n// Removed unused calculateEndDate helper function\n\n// Helper function to call the email sending API\nasync function sendNotificationEmail(details: any) {\n    const internalAppUrl = 'http://localhost:9002';\n    const emailApiUrl = `${internalAppUrl}/api/send-email`;\n    console.log(`Attempting to POST to internal API route: ${emailApiUrl}`);\n    try {\n        const response = await fetch(emailApiUrl, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(details),\n        });\n        console.log(`Response status from ${emailApiUrl}: ${response.status}`);\n        if (!response.ok) {\n            const responseText = await response.text();\n            console.error(`Error response body from ${emailApiUrl}:`, responseText);\n            try {\n                const errorData = JSON.parse(responseText);\n                console.error(`Email API Error (${response.status}):`, errorData.error || 'Unknown error (parsed JSON)');\n            } catch (parseError) {\n                console.error(`Email API Error (${response.status}): Could not parse error response as JSON.`);\n            }\n        } else {\n            const successData = await response.json();\n            console.log(`Email notification triggered successfully via ${emailApiUrl}. Response:`, successData);\n        }\n    } catch (error) {\n        if (error instanceof TypeError && error.message.includes('fetch failed')) {\n           console.error(`Network error fetching ${emailApiUrl}:`, error.cause ?? error);\n        } else {\n           console.error(`Generic error fetching internal API ${emailApiUrl}:`, error);\n        }\n    }\n}\n\nexport const dynamic = 'force-dynamic';\n\nexport async function GET(request: Request) {\n  console.log(`Received request for /api/confirmation-details`);\n  const { searchParams } = new URL(request.url);\n  const sessionId = searchParams.get('session_id');\n  console.log(`Session ID: ${sessionId}`);\n\n  if (!sessionId) {\n    console.error('Missing session_id parameter');\n    return NextResponse.json({ error: 'Missing session_id' }, { status: 400 });\n  }\n\n  try {\n    console.log('Retrieving Stripe session...');\n    const session = await stripe.checkout.sessions.retrieve(sessionId);\n    console.log('Stripe session retrieved successfully.');\n\n    console.log(`Session ${sessionId} payment status: ${session.payment_status}`);\n    if (session.payment_status !== 'paid') {\n        console.warn(`Email notification skipped: Payment status is ${session.payment_status}`);\n    }\n\n    // Extract data from metadata using new keys\n    const entryDateISO = session.metadata?.entryDate; // e.g., \"2024-07-25\"\n    const exitDateISO = session.metadata?.exitDate;   // e.g., \"2024-07-28\"\n    const duration = session.metadata?.durationDays;\n    const totalPrice = session.amount_total ? session.amount_total / 100 : null;\n    const currency = session.currency || 'usd';\n    const licensePlate = session.metadata?.licensePlate;\n    const truckNumber = session.metadata?.truckNumber;\n    const paymentStatus = session.payment_status;\n\n    // Format dates for display\n    const formattedEntryDate = entryDateISO ? format(parseISO(entryDateISO), \"PPP\") : null; // e.g., Jul 25, 2024\n    const formattedExitDate = exitDateISO ? format(parseISO(exitDateISO), \"PPP\") : null;\n\n    console.log(`Retrieved Dates: Entry=${formattedEntryDate}, Exit=${formattedExitDate}, Duration=${duration}`);\n\n    // Prepare data for frontend and email using new terminology\n    const bookingDetails = {\n      entryDate: formattedEntryDate,\n      exitDate: formattedExitDate,\n      duration: duration || null, // Keep duration for potential internal use or display\n      totalPrice: totalPrice,\n      currency: currency,\n      licensePlate: licensePlate || null,\n      truckNumber: truckNumber || null,\n      paymentStatus: paymentStatus,\n    };\n    console.log('Prepared booking details for response.');\n\n    // Trigger Email ONLY if Payment is Successful, using new fields\n    if (paymentStatus === 'paid') {\n      console.log('Payment status is paid. Triggering email notification...');\n      sendNotificationEmail({\n         // Use new keys for the email content\n         entryDate: formattedEntryDate,\n         exitDate: formattedExitDate,\n         duration: duration, // Still sending duration, email template needs update\n         totalPrice: totalPrice,\n         currency: currency,\n         licensePlate: licensePlate,\n         truckNumber: truckNumber,\n      }).catch(err => console.error(\"Error calling sendNotificationEmail function:\", err));\n    }\n\n    console.log('Sending booking details response to client.');\n    return NextResponse.json(bookingDetails);\n\n  } catch (error) {\n    console.error(\"Error in /api/confirmation-details route:\", error);\n     if (error instanceof Error) {\n         if (error.name === 'StripeInvalidRequestError') {\n             return NextResponse.json({ error: 'Invalid session ID provided.' }, { status: 404 });\n         }\n         console.error(`Stripe API or other error: ${error.message}`);\n         return NextResponse.json({ error: error.message }, { status: 500 });\n     }\n     return NextResponse.json({ error: 'An unknown error occurred while fetching session details.' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}