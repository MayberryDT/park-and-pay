{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/checkout/route.ts"],"sourcesContent":["// src/app/api/checkout/route.ts\nimport { NextResponse } from 'next/server';\nimport Stripe from 'stripe';\nimport { format, parseISO, differenceInCalendarDays } from 'date-fns'; // Import date-fns functions\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2025-03-31.basil',\n});\n\n// Update request body structure\ninterface RequestBody {\n    date: string;       // Entry date (ISO format \"yyyy-MM-dd\")\n    exitDate: string;   // Exit date (ISO format \"yyyy-MM-dd\")\n    duration: string;   // Duration sent from client (will be re-calculated/validated)\n    price: string;\n    licensePlate: string;\n    truckNumber: string;\n    couponCode?: string; // Optional coupon code\n}\n\n// Function to recalculate duration server-side\nconst calculateDurationServerSide = (entryDateStr: string, exitDateStr: string): number => {\n  try {\n    const entry = parseISO(entryDateStr);\n    const exit = parseISO(exitDateStr);\n    if (exit <= entry) return 0; // Ensure exit date is after entry date\n    // Calculate the difference in days (number of nights)\n    return differenceInCalendarDays(exit, entry); \n  } catch (e) {\n    console.error(\"Error parsing dates for duration calculation:\", e);\n    return 0;\n  }\n};\n\n// --- Price calculation logic --- \nconst calculatePriceServerSide = (durationDays: number, couponCode?: string): number => {\n  console.log(`[calculatePriceServerSide] Duration: ${durationDays}, Coupon Received: '${couponCode}'`); // DEBUG\n  const DAILY_RATE = 10;\n  const WEEKLY_RATE = 65;\n  const MONTHLY_RATE = 275;\n  const DAYS_IN_WEEK = 7;\n  const DAYS_IN_MONTH = 30;\n\n  if (durationDays <= 0) return 0;\n  let months = Math.floor(durationDays / DAYS_IN_MONTH);\n  let remainingDaysAfterMonths = durationDays % DAYS_IN_MONTH;\n  let weeks = Math.floor(remainingDaysAfterMonths / DAYS_IN_WEEK);\n  let remainingDays = remainingDaysAfterMonths % DAYS_IN_WEEK;\n  let priceForRemainingDays = Math.min(\n      weeks * WEEKLY_RATE + remainingDays * DAILY_RATE,\n      Math.ceil(remainingDaysAfterMonths / DAYS_IN_WEEK) * WEEKLY_RATE,\n      remainingDaysAfterMonths * DAILY_RATE\n  );\n  let calculatedPrice = months * MONTHLY_RATE + priceForRemainingDays;\n  let finalPrice = Math.min(\n      calculatedPrice,\n      durationDays * DAILY_RATE,\n      Math.ceil(durationDays / DAYS_IN_WEEK) * WEEKLY_RATE,\n      Math.ceil(durationDays / DAYS_IN_MONTH) * MONTHLY_RATE\n  );\n  console.log(`[calculatePriceServerSide] Price before coupon: ${finalPrice}`); // DEBUG\n\n  if (couponCode && couponCode.toUpperCase() === 'LOCAL175') { // Normalize coupon check\n      console.log(`[calculatePriceServerSide] Applying LOCAL175 coupon.`); // DEBUG\n      finalPrice = 175;\n  } else {\n      console.log(`[calculatePriceServerSide] Coupon '${couponCode}' not applied or invalid.`); // DEBUG\n  }\n\n  console.log(`[calculatePriceServerSide] Final price: ${finalPrice}`); // DEBUG\n  return finalPrice;\n};\n// --- End Price calculation logic ---\n\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json() as RequestBody;\n    const { date: entryDate, exitDate, duration, price, licensePlate, truckNumber, couponCode } = body;\n    console.log(\"[POST /api/checkout] Received request body:\", body); // DEBUG: Log entire body\n\n    // Validate Dates, Duration, and Price\n    if (!entryDate || !exitDate || !duration || !price || !licensePlate || !truckNumber) {\n      console.error(\"[POST /api/checkout] Error: Missing required booking details\", body); // DEBUG\n      return NextResponse.json({ error: 'Missing required booking details' }, { status: 400 });\n    }\n\n    // Recalculate duration on the server for security\n    const serverCalculatedDuration = calculateDurationServerSide(entryDate, exitDate);\n    const clientDurationNum = parseInt(duration, 10);\n    console.log(`[POST /api/checkout] Server Duration: ${serverCalculatedDuration}, Client Duration: ${clientDurationNum}`); // DEBUG\n\n    if (serverCalculatedDuration <= 0 || isNaN(clientDurationNum) /* Note: Client duration mismatch check removed for now || serverCalculatedDuration !== clientDurationNum */) {\n      console.warn(`[POST /api/checkout] Duration mismatch/invalid: Client=${duration}, Server=${serverCalculatedDuration}. Handling...`); // DEBUG\n      if(serverCalculatedDuration <= 0) {\n         if (entryDate === exitDate) {\n             console.error(\"[POST /api/checkout] Error: Entry and Exit dates cannot be the same.\"); // DEBUG\n             return NextResponse.json({ error: 'Entry and Exit dates cannot be the same.' }, { status: 400 });\n         } else {\n             console.error(\"[POST /api/checkout] Error: Invalid entry/exit date combination.\"); // DEBUG\n             return NextResponse.json({ error: 'Invalid entry/exit date combination. Exit date must be after entry date.' }, { status: 400 });\n         }\n      }\n       // If duration mismatch, maybe still proceed? For now, we proceed based on server duration if > 0\n    }\n\n    // Recalculate price on the server based on the *server-calculated* duration and received coupon\n    const serverCalculatedPrice = calculatePriceServerSide(serverCalculatedDuration, couponCode);\n    const clientPriceNum = parseFloat(price);\n    console.log(`[POST /api/checkout] Server Price: ${serverCalculatedPrice}, Client Price: ${clientPriceNum}, Coupon Code Provided: '${couponCode}'`); // DEBUG\n\n    // Price validation/warning (using server price regardless)\n    if (isNaN(clientPriceNum) || serverCalculatedPrice !== clientPriceNum) {\n         console.warn(`[POST /api/checkout] Price mismatch: Client=${clientPriceNum}, Server=${serverCalculatedPrice}. Using server price.`);\n    }\n\n    const priceInCents = serverCalculatedPrice * 100; \n    if (priceInCents <= 0) {\n       console.error(\"[POST /api/checkout] Error: Calculated price must be positive.\", { serverCalculatedPrice }); // DEBUG\n       return NextResponse.json({ error: 'Calculated price must be positive.' }, { status: 400 });\n    }\n    console.log(`[POST /api/checkout] Final price in cents for Stripe: ${priceInCents}`); // DEBUG\n\n    // Format dates for display\n    const formattedEntryDate = format(parseISO(entryDate), \"PPP\");\n    const formattedExitDate = format(parseISO(exitDate), \"PPP\");\n    const description = `Truck Parking: ${formattedEntryDate} to ${formattedExitDate} (${serverCalculatedDuration} day${serverCalculatedDuration === 1 ? '' : 's'}). Plate: ${licensePlate}, Truck: ${truckNumber}`;\n\n    // Define success and cancel URLs\n    let YOUR_DOMAIN = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:9002';\n    if (!YOUR_DOMAIN) {\n      console.error(\"[POST /api/checkout] CRITICAL ERROR: NEXT_PUBLIC_APP_URL is not set!\");\n      return NextResponse.json({ error: 'Server configuration error.' }, { status: 500 });\n    }\n    if (YOUR_DOMAIN.endsWith('/')) {\n      YOUR_DOMAIN = YOUR_DOMAIN.slice(0, -1);\n    }\n    const successUrl = `${YOUR_DOMAIN}/confirmation?session_id={CHECKOUT_SESSION_ID}`;\n    const cancelUrl = `${YOUR_DOMAIN}/`;\n    console.log(`[POST /api/checkout] Stripe URLs: Success=${successUrl}, Cancel=${cancelUrl}`); // DEBUG\n\n    // Create a Stripe Checkout Session\n    console.log(\"[POST /api/checkout] Creating Stripe session...\"); // DEBUG\n    const session = await stripe.checkout.sessions.create({\n      payment_method_types: ['card'],\n      line_items: [\n        {\n          price_data: {\n            currency: 'usd',\n            product_data: {\n              name: 'Truck Parking Spot Reservation',\n              description: description,\n              images: [],\n            },\n            unit_amount: priceInCents, // Use the final server-calculated price\n          },\n          quantity: 1,\n        },\n      ],\n      mode: 'payment',\n      success_url: successUrl,\n      cancel_url: cancelUrl,\n      metadata: {\n        entryDate: entryDate,\n        exitDate: exitDate,\n        durationDays: serverCalculatedDuration.toString(),\n        licensePlate: licensePlate,\n        truckNumber: truckNumber,\n      },\n    });\n    console.log(\"[POST /api/checkout] Stripe session created successfully:\", session.id); // DEBUG\n\n    // Return the session ID to the frontend\n    return NextResponse.json({ sessionId: session.id });\n\n  } catch (error) {\n    console.error(\"[POST /api/checkout] Error creating Stripe session:\", error); // DEBUG\n    if (error instanceof Error) {\n         return NextResponse.json({ error: error.message }, { status: 500 });\n    }\n     return NextResponse.json({ error: 'An unknown error occurred' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}