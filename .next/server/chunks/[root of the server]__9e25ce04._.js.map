{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/api/send-email/route.ts"],"sourcesContent":["// src/app/api/send-email/route.ts\nimport { NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\nexport async function POST(request: Request) {\n  console.log('Received request for /api/send-email');\n  let transporter;\n  try {\n    const body = await request.json();\n    console.log('Email request body:', body);\n    // Destructure using the new names sent from confirmation-details\n    const { entryDate, exitDate, duration, totalPrice, currency, licensePlate, truckNumber } = body;\n\n    // --- Validate Data (using new field names) ---\n    if (!entryDate || !exitDate || !duration || !totalPrice || !currency || !licensePlate || !truckNumber) {\n      console.error('Missing email data in request body.');\n      // Use consistent field names in error reporting if needed\n      return NextResponse.json({ error: 'Missing required data for email.' }, { status: 400 });\n    }\n    // --- End Validation ---\n\n    console.log('Creating nodemailer transporter...');\n    const emailHost = process.env.EMAIL_HOST;\n    const emailPort = parseInt(process.env.EMAIL_PORT || \"587\", 10);\n    const emailUser = process.env.EMAIL_USER;\n    const emailPass = process.env.EMAIL_PASSWORD;\n    const emailFrom = process.env.EMAIL_FROM;\n    const operatorEmail = process.env.OPERATOR_EMAIL;\n\n    console.log(`Using EMAIL_HOST: ${emailHost}`);\n    console.log(`Using EMAIL_PORT: ${emailPort}`);\n    console.log(`Using EMAIL_USER: ${emailUser}`);\n    console.log(`Using EMAIL_PASSWORD: ${emailPass ? '********' : 'Not Set'}`);\n    console.log(`Using EMAIL_FROM: ${emailFrom}`);\n    console.log(`Using OPERATOR_EMAIL: ${operatorEmail}`);\n\n    if (!emailHost || !emailUser || !emailPass || !emailFrom || !operatorEmail) {\n      console.error('Missing required email environment variables.');\n      return NextResponse.json({ error: 'Email server configuration is incomplete.' }, { status: 500 });\n    }\n\n    transporter = nodemailer.createTransport({\n      host: emailHost,\n      port: emailPort,\n      secure: emailPort === 465,\n      auth: {\n          user: emailUser,\n          pass: emailPass,\n      },\n    });\n\n    console.log('Transporter created. Preparing mail options...');\n    // --- Update Email HTML Body --- \n    const mailOptions = {\n      from: emailFrom,\n      to: operatorEmail,\n      subject: 'New Truck Parking Reservation',\n      html: `\n        <p>A new truck parking reservation has been made:</p>\n        <ul>\n          <li><strong>Entry Date:</strong> ${entryDate}</li>\n          <li><strong>Exit Date:</strong> ${exitDate}</li>\n          <li><strong>Duration:</strong> ${duration} days</li>\n          <li><strong>Total Price:</strong> ${totalPrice} ${currency.toUpperCase()}</li>\n          <li><strong>License Plate:</strong> ${licensePlate}</li>\n          <li><strong>Truck Number:</strong> ${truckNumber}</li>\n        </ul>\n      `,\n    };\n    // --- End Update Email HTML Body --- \n\n    console.log('Sending email...');\n    const info = await transporter.sendMail(mailOptions);\n\n    console.log('Email sent successfully. Message ID:', info.messageId);\n    if (process.env.EMAIL_HOST === \"smtp.ethereal.email\") {\n        console.log(\"Preview URL: %s\", nodemailer.getTestMessageUrl(info));\n    }\n\n    return NextResponse.json({ success: true, messageId: info.messageId });\n\n  } catch (error) {\n    console.error('Error caught in /api/send-email route:', error);\n    if (error instanceof Error) {\n        console.error('Error name:', error.name);\n        console.error('Error message:', error.message);\n        if ('code' in error) {\n          console.error('Nodemailer error code:', (error as any).code);\n        }\n        if ('responseCode' in error) {\n           console.error('SMTP Response Code:', (error as any).responseCode);\n        }\n        return NextResponse.json({ error: `Failed to send email: ${error.message}` }, { status: 500 });\n    }\n    return NextResponse.json({ error: 'An unknown error occurred while sending the email' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}